#!/usr/local/bin/newt

Require("NSUnit");

/**
 * Rough testing of NSUnit.
 */

begin

  NSUnit := GetGlobalVar('|NSUnit:makkintosshu|);
  if NSUnit == NIL then Print("Couldn't get global var!\n");

  passes := 0;
  fails := 0;

  // protoNSUnitTestCase:AssertTrue() tests
  playground := { testCase: { _proto: NSUnit.protoNSUnitTestCase } };
  Print("AssertTrue(true): ");
  try
    playground.testCase:AssertTrue(true);
    passes := passes + 1; Print("PASS\n");
  onexception |evt.ex.msg.assert| do begin fails := fails + 1; Print ("FAIL\n"); end;
  Print("AssertTrue(nil): ");
  try
    playground.testCase:AssertTrue(nil);
    fails := fails + 1; Print("FAIL\n");
  onexception |evt.ex.msg.assert| do begin passes := passes + 1; Print("PASS\n"); end;
  Print("AssertTrue(\"some string\"): ");
  try
    playground.testCase:AssertTrue("some string");
    fails := fails + 1; Print("FAIL\n");
  onexception |evt.ex.msg.assert| do begin passes := passes + 1; Print("PASS\n"); end;

  // protoNSUnitTestCase:AssertNil() tests
  playground := { testCase: { _proto: NSUnit.protoNSUnitTestCase } };
  Print("AssertNil(nil): ");
  try
    playground.testCase:AssertNil(nil);
    passes := passes + 1; Print("PASS\n");
  onexception |evt.ex.msg.assert| do begin fails := fails + 1; Print ("FAIL\n"); end;
  Print("AssertNil(true): ");
  try
    playground.testCase:AssertNil(true);
    fails := fails + 1; Print("FAIL\n");
  onexception |evt.ex.msg.assert| do begin passes := passes + 1; Print("PASS\n"); end;
  Print("AssertNil(\"some string\"): ");
  try
    playground.testCase:AssertNil("some string");
    fails := fails + 1; Print("FAIL\n");
  onexception |evt.ex.msg.assert| do begin passes := passes + 1; Print("PASS\n"); end;

  // protoNSUnitTestCase:AssertEquals() tests
  playground := { testCase: { _proto: NSUnit.protoNSUnitTestCase } };
  Print("AssertEquals(1,1): ");
  try
    playground.testCase:AssertEquals(1, 1);
    passes := passes + 1; Print("PASS\n");
  onexception |evt.ex.msg.assert| do begin fails := fails + 1; Print("FAIL\n"); end;
  Print("AssertEquals(0,1): ");
  try
    playground.testCase:AssertEquals(0, 1);
    fails := fails + 1; Print("FAIL\n");
  onexception |evt.ex.msg.assert| do begin passes := passes + 1; Print("PASS\n"); end;
  Print("AssertEquals(\"some string\",\"some string\"): ");
  try
    playground.testCase:AssertEquals("some string", "some string");
    passes := passes + 1; Print("PASS\n");
  onexception |evt.ex.msg.assert| do begin fails := fails + 1; Print("FAIL\n"); end;
  Print("AssertEquals(\"some string\",\"some other string\"): ");
  try
    playground.testCase:AssertEquals("some string", "some other string");
    fails := fails + 1; Print("FAIL\n");
  onexception |evt.ex.msg.assert| do begin passes := passes + 1; Print("PASS\n"); end;

  // protoNSUnitTestCase:AssertNotEquals() tests
  playground := { testCase: { _proto: NSUnit.protoNSUnitTestCase } };
  Print("AssertNotEquals(1,1): ");
  try
    playground.testCase:AssertNotEquals(1, 1);
    fails := fails + 1; Print("FAIL\n");
  onexception |evt.ex.msg.assert| do begin passes := passes + 1; Print("PASS\n"); end;
  Print("AssertNotEquals(0,1): ");
  try
    playground.testCase:AssertNotEquals(0, 1);
    passes := passes + 1; Print("PASS\n");
  onexception |evt.ex.msg.assert| do begin fails := fails + 1; Print("FAIL\n"); end;
  Print("AssertNotEquals(\"some string\",\"some string\"): ");
  try
    playground.testCase:AssertNotEquals("some string", "some string");
    fails := fails + 1; Print("FAIL\n");
  onexception |evt.ex.msg.assert| do begin passes := passes + 1; Print("PASS\n"); end;
  Print("AssertNotEquals(\"some string\",\"some other string\"): ");
  try
    playground.testCase:AssertNotEquals("some string", "some other string");
    passes := passes + 1; Print("PASS\n");
  onexception |evt.ex.msg.assert| do begin fails := fails + 1; Print("FAIL\n"); end;

  // protoNSUnitTestCase:AssertGreaterThan() tests
  playground := { testCase: { _proto: NSUnit.protoNSUnitTestCase } };
  Print("AssertGreaterThan(1,0): ");
  try
    playground.testCase:AssertGreaterThan(1, 0);
    fails := fails + 1; Print("FAIL\n");
  onexception |evt.ex.msg.assert| do begin passes := passes + 1; Print("PASS\n"); end;
  Print("AssertGreaterThan(1,1): ");
  try
    playground.testCase:AssertGreaterThan(1, 1);
    fails := fails + 1; Print("FAIL\n");
  onexception |evt.ex.msg.assert| do begin passes := passes + 1; Print("PASS\n"); end;
  Print("AssertGreaterThan(0,1): ");
  try
    playground.testCase:AssertGreaterThan(0, 1);
    passes := passes + 1; Print("PASS\n");
  onexception |evt.ex.msg.assert| do begin fails := fails + 1; Print("FAIL\n"); end;

  // protoNSUnitTestCase:AssertGreaterThanOrEqual() tests
  playground := { testCase: { _proto: NSUnit.protoNSUnitTestCase } };
  Print("AssertGreaterThanOrEqual(1,0): ");
  try
    playground.testCase:AssertGreaterThanOrEqual(1, 0);
    fails := fails + 1; Print("FAIL\n");
  onexception |evt.ex.msg.assert| do begin passes := passes + 1; Print("PASS\n"); end;
  Print("AssertGreaterThanOrEqual(1,1): ");
  try
    playground.testCase:AssertGreaterThanOrEqual(1,1);
    passes := passes + 1; Print("PASS\n");
  onexception |evt.ex.msg.assert| do begin fails := fails + 1; Print("FAIL\n"); end;
  Print("AssertGreaterThanOrEqual(0,1): ");
  try
    playground.testCase:AssertGreaterThanOrEqual(0, 1);
    passes := passes + 1; Print("PASS\n");
  onexception |evt.ex.msg.assert| do begin fails := fails + 1; Print("FAIL\n"); end;

  // protoNSUnitTestCase:AssertLessThan() tests
  playground := { testCase: { _proto: NSUnit.protoNSUnitTestCase } };
  Print("AssertLessThan(1,0): ");
  try
    playground.testCase:AssertLessThan(1, 0);
    passes := passes + 1; Print("PASS\n");
  onexception |evt.ex.msg.assert| do begin fails := fails + 1; Print("FAIL\n"); end;
  Print("AssertLessThan(1,1): ");
  try
    playground.testCase:AssertLessThan(1, 1);
    fails := fails + 1; Print("FAIL\n");
  onexception |evt.ex.msg.assert| do begin passes := passes + 1; Print("PASS\n"); end;
  Print("AssertLessThan(0,1): ");
  try
    playground.testCase:AssertLessThan(0, 1);
    fails := fails + 1; Print("FAIL\n");
  onexception |evt.ex.msg.assert| do begin passes := passes + 1; Print("PASS\n"); end;

  // protoNSUnitTestCase:AssertLessThanOrEqual() tests
  playground := { testCase: { _proto: NSUnit.protoNSUnitTestCase } };
  Print("AssertLessThanOrEqual(1,0): ");
  try
    playground.testCase:AssertLessThanOrEqual(1, 0);
    passes := passes + 1; Print("PASS\n");
  onexception |evt.ex.msg.assert| do begin fails := fails + 1; Print("FAIL\n"); end;
  Print("AssertLessThanOrEqual(1,1): ");
  try
    playground.testCase:AssertLessThanOrEqual(1, 1);
    passes := passes + 1; Print("PASS\n");
  onexception |evt.ex.msg.assert| do begin fails := fails + 1; Print("FAIL\n"); end;
  Print("AssertLessThanOrEqual(0, 1): ");
  try
    playground.testCase:AssertLessThanOrEqual(0, 1);
    fails := fails + 1; Print("FAIL\n");
  onexception |evt.ex.msg.assert| do begin passes := passes + 1; Print("PASS\n"); end;

  // protoNSUtitTestCase:AssertFrameContainsSlot() tests
  playground := { testCase: { _proto: NSUnit.protoNSUnitTestCase }, testFrame: { someSlot: "something" } };
  Print("testFrame: { someSlot: \"something\" }\n");
  Print("AssertFrameContainsSlot(testFrame 'someSlot): ");
  try
    playground.testCase:AssertFrameContainsSlot(playground.testFrame, 'someSlot);
    passes := passes + 1; Print("PASS\n");
  onexception |evt.ex.msg.assert| do begin fails := fails + 1; Print("FAIL\n"); end;
  Print("AssertFrameContainsSlot(testFrame 'anotherSlot): ");
  try
    playground.testCase:AssertFrameContainsSlot(playground.testFrame, 'anotherSlot);
    fails := fails + 1; Print("FAIL\n");
  onexception |evt.ex.msg.assert| do begin passes := passes + 1; Print("PASS\n"); end;

  // protoNSUnitTestCase:Run() tests
  playground := { testCase: { _proto: NSUnit.protoNSUnitTestCase } };
  Print("testCase { _proto: NSUnit.protoNSUnitTestCase }\n");
  Print("testCase:Run() no tests: ");
  result := playground.testCase:Run();
  if result = true and playground.testCase.assertions = 0 and playground.testCase.passes = 0 and playground.testCase.fails = 0 then begin passes := passes + 1; Print("PASS\n"); end; else begin fails := fails + 1; Print("FAIL\n"); end;
  playground := { testCase: { _proto: NSUnit.protoNSUnitTestCase, TestNil: func () begin self:AssertNil(nil); end } };
  Print("testCase { _proto: NSUnit.protoNSUnitTestCase, TestNil: func () begin self.AssertNil(nil); end }\n");
  Print("testCase:Run() passing test: ");
  result := playground.testCase:Run();
  if result = true and playground.testCase.assertions = 1 and playground.testCase.passes = 1 and playground.testCase.fails = 0 then begin passes := passes + 1; Print("PASS\n") end; else begin fails := fails + 1; Print("FAIL\n"); end;
  playground := { testCase: { _proto: NSUnit.protoNSUnitTestCase, TestTrue: func () begin self:AssertTrue(nil); end} };
  Print("testCase: { _proto: NSUnit.protoNSUnitTestCase, TestTrue: func () begin self:AssertTrue(nil); end }\n");
  Print("testCase:Run() failing test: ");
  result := playground.testCase:Run();
  if result = nil and playground.testCase.assertions = 1 and playground.testCase.passes = 0 and playground.testCase.fails = 1 then begin passes := passes + 1; Print("PASS\n") end; else begin fails := fails + 1; Print("FAIL\n"); end;

  // Summary
  Print("\nPassed:" && passes & "\n");
  Print("Failed:" && fails & "\n");
  if fails > 0 then Exit(1);
end;
